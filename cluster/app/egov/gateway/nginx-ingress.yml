---
# Source: nginx-ingress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: "{{ conf['nginx-ingress']['namespace'] }}"  
---
# Source: nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: "{{ conf['nginx-ingress']['namespace'] }}"
---
# Source: nginx-ingress/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: "{{ conf['nginx-ingress']['namespace'] }}"
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: nginx-ingress/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: "{{ conf['nginx-ingress']['namespace'] }}"  
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: "{{ conf['nginx-ingress']['namespace'] }}"
---
# Source: nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress-controller
  namespace: "{{ conf['nginx-ingress']['namespace'] }}"
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: nginx-ingress
  type: "LoadBalancer"      

---
# Source: nginx-ingress/templates/controller-deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress-controller
  namespace: "{{ conf['nginx-ingress']['namespace'] }}"
spec:
  replicas: {{ conf['nginx-ingress']['replicas'] or 1}}
  strategy:
    rollingUpdate:
      maxUnavailable: 0
    type: RollingUpdate  
  revisionHistoryLimit: 10  
  strategy:
    {}   
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: nginx-ingress
    spec:             
      dnsPolicy: ClusterFirst
      containers:
        - name: nginx-ingress-controller
          image: "{{conf['nginx-ingress']['images'][0]}}"
          imagePullPolicy: "IfNotPresent"
          args:
            - /nginx-ingress-controller
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --enable-dynamic-certificates=false
            - --enable-ssl-chain-completion=true
            - --configmap={{ conf['nginx-ingress']['namespace'] }}/nginx-ingress-controller
            # - --default-backend-service={{ conf['nginx-ingress']['default-backend-service'] }}
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 33
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown            
          resources:
            {}
      hostNetwork: false
      serviceAccountName: nginx-ingress
      terminationGracePeriodSeconds: 60            

---
# Source: nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress-controller
  namespace: "{{ conf['nginx-ingress']['namespace'] }}"
data:
  add-headers: "{{ conf['nginx-ingress']['namespace'] }}/custom-headers"
  enable-vts-status: "false"
  use-gzip: "true"
  proxy-read-timeout: "60"  
  client-max-body-size: "2m"
  server-tokens: "false"
  ssl-ciphers: "{{ conf['nginx-ingress']['ssl-ciphers'] }}"
  ssl-ecdh-curve: "{{ conf['nginx-ingress']['ssl-ecdh-curve'] }}"
  ssl-protocols: "{{ conf['nginx-ingress']['ssl-protocols'] }}"
---
apiVersion: v1
data:
  Strict-Transport-Security: "max-age=63072000; includeSubdomains; preload"
  X-Frame-Options: "sameorigin"
  X-Content-Type-Options: "nosniff"
  Content-Security-Policy: "default-src 'self' https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; img-src 'self' https: data: blob:; style-src https: blob: 'unsafe-inline'; worker-src 'self' blob:"
  X-XSS-Protection: "1"
  Referrer-Policy: "no-referrer-when-downgrade"
kind: ConfigMap
metadata:
  name: custom-headers
  namespace: "{{ conf['nginx-ingress']['namespace'] }}"
