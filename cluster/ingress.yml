apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: routes
  namespace: egov
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/app-root: /citizen    
    nginx.ingress.kubernetes.io/lua-resty-waf: "active"  
    nginx.ingress.kubernetes.io/lua-resty-waf-debug: "true"
    nginx.ingress.kubernetes.io/lua-resty-waf-score-threshold: "10"
    nginx.ingress.kubernetes.io/lua-resty-waf-allow-unknown-content-types: "true"
    certmanager.k8s.io/cluster-issuer: "{{ conf['nginx-ingress']['cert-issuer'] }}" 
spec:
  rules:
  - host: {{ conf['egov-config']['domain'] }}
    http:
      paths:
      - backend:
          serviceName: telemetry
          servicePort: 9001
        path: /v1/telemetry
      - backend:
          serviceName: citizen
          servicePort: 80
        path: /citizen      
      - backend:
          serviceName: employee
          servicePort: 80
        path: /employee
      - backend:
          serviceName: ui-dashboard
          servicePort: 80
        path: /rainmaker/dashboard
      - backend:
          serviceName: rainmaker-custom-service
          servicePort: 8000
        path: /customization/(open|static)
      - backend:
          serviceName: whatsapp-webhook
          servicePort: 8000
        path: /whatsapp-webhook/messages
      - backend:
          serviceName: zuul
          servicePort: 8080
        path: /(egov-location|localization|user|user-otp|otp|egov-common-masters|tenant|billing-service|access|egov-idgen|pg-service|pt-calculator-v2|pt-services-v2|rainmaker-pgr|egov-mdms-create|data-uploader|egov-searcher|egov-indexer|egov-mdms-service|citizen-services|report|tl-services|tl-masters|egf-instrument|egf-master|collection-services|customization|tl-calculator|collection-receipt-voucher-consumer|egov-workflow-v2|egov-hrms|apportion-service|firenoc-services|firenoc-calculator|egov-user-event)                  
  tls:
  - hosts:
    - {{ conf['egov-config']['domain'] }}
    secretName: {{ conf['egov-config']['domain'] }}-tls-certs
{% if conf['kibana-v1'] and conf['kibana-v1']['credentials'] %}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: routes
  namespace: es-cluster
  annotations:
    kubernetes.io/ingress.class: "nginx"     
    nginx.ingress.kubernetes.io/auth-type: basic  
    nginx.ingress.kubernetes.io/auth-secret: kibana-creds
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Kibana'          
spec:
  rules:
  - host: {{ conf['egov-config']['domain'] }}
    http:
      paths:
      - backend:
          serviceName: kibana
          servicePort: 5601
        path: /kibana
{% endif %}        
{% if conf['kibana-infra-v1'] and conf['kibana-infra-v1']['credentials'] %}        
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: routes
  namespace: es-cluster-infra
  annotations:
    kubernetes.io/ingress.class: "nginx"     
    nginx.ingress.kubernetes.io/auth-type: basic  
    nginx.ingress.kubernetes.io/auth-secret: kibana-infra-creds
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Kibana'          
spec:
  rules:
  - host: {{ conf['egov-config']['domain'] }}
    http:
      paths:
      - backend:
          serviceName: kibana-infra-v1
          servicePort: 5601
        path: /kibana-infra        
{% endif %}
{% if conf['egov-config']['s3-assets-bucket'] %} 
---
apiVersion: v1
kind: Service
metadata:
  name: s3-proxy
  namespace: egov
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ExternalName
  externalName: s3.ap-south-1.amazonaws.com       
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: s3-proxy
  namespace: egov
  annotations:
    kubernetes.io/ingress.class: "nginx" 
    nginx.ingress.kubernetes.io/use-regex: "true"    
    nginx.ingress.kubernetes.io/upstream-vhost: s3.ap-south-1.amazonaws.com
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"                       
spec:
  rules:
  - host: {{ conf['egov-config']['domain'] }}
    http:
      paths:
      - backend:
          serviceName: s3-proxy
          servicePort: 80
        path: /{{ conf['egov-config']['s3-assets-bucket'] }}/     
{% endif %}  